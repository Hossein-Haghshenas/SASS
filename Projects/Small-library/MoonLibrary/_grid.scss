@use "sass:math";

$grid-columns: 13;

$grid-gap: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

/* layout-values */

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes

.container {
  width: 100%;
  min-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

// col classes

@include xs {
  @for $i from 0 to $grid-columns {
    .col-xs-#{$i} {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      box-sizing: border-box;
    }
  }
}

@include sm {
  @for $i from 0 to $grid-columns {
    .col-sm-#{$i} {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      box-sizing: border-box;
    }
  }
}
@include md {
  @for $i from 0 to $grid-columns {
    .col-md-#{$i} {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      box-sizing: border-box;
    }
  }
}
@include lg {
  @for $i from 0 to $grid-columns {
    .col-lg-#{$i} {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      box-sizing: border-box;
    }
  }
}
@include xl {
  @for $i from 0 to $grid-columns {
    .col-xl-#{$i} {
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      box-sizing: border-box;
    }
  }
}

/* grid gaps*/

@each $key, $val in $grid-gap {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    padding-left: -$val;
    padding-right: -$val;
  }
}

/* layout-values */

@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}
